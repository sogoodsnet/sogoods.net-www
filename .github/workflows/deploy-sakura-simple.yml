name: Deploy Complete Website to Sakura Server

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '*.html'
      - '*.css'
      - '*.js'
      - '*.csv'
      - '*.json'
      - '*.md'
      - 'assets/**'
      - 'functions/**'

jobs:
  complete-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Complete Website Deployment to FreeBSD
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: sogoodsnet.sakura.ne.jp
        username: sogoodsnet
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        timeout: 60s
        script: |
          echo "üöÄ Complete Website Deployment to FreeBSD"
          
          # Âü∫Êú¨ÊÉÖÂ†±Á¢∫Ë™ç
          echo "User: `whoami`"
          echo "Home: $HOME"
          echo "Shell: $SHELL"
          echo "Date: `date`"
          
          # „Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„Çí‰ΩúÊàê
          mkdir -p $HOME/www
          mkdir -p $HOME/www/assets/logo
          mkdir -p $HOME/www/functions/api
          mkdir -p $HOME/www/photos/miiko
          mkdir -p $HOME/backup/$(date +%Y%m%d_%H%M%S)
          
          cd $HOME/www
          echo "Current directory: `pwd`"
          
          # Êó¢Â≠ò„Éï„Ç°„Ç§„É´„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó
          if [ -f "index.html" ]; then
            echo "üì¶ Backing up existing files..."
            BACKUP_DIR="$HOME/backup/$(date +%Y%m%d_%H%M%S)"
            cp -r * "$BACKUP_DIR/" 2>/dev/null || true
            echo "Backup created at: $BACKUP_DIR"
          fi
          
          echo "üì• Downloading complete website from GitHub..."
          
          # Core HTML and CSS files
          echo "üìÑ Downloading core files..."
          fetch -q -o index.html https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/index.html || curl -s -o index.html https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/index.html
          fetch -q -o about.html https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/about.html || curl -s -o about.html https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/about.html
          fetch -q -o style.css https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/style.css || curl -s -o style.css https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/style.css
          
          # JavaScript files (if still needed separately)
          echo "üìú Downloading JavaScript files..."
          fetch -q -o photo-manager.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/photo-manager.js || curl -s -o photo-manager.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/photo-manager.js
          fetch -q -o tanka-system.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tanka-system.js || curl -s -o tanka-system.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tanka-system.js
          fetch -q -o notion-api.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/notion-api.js || curl -s -o notion-api.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/notion-api.js
          
          # Database files
          echo "üóÉÔ∏è Downloading database files..."
          fetch -q -o tankadb.csv https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tankadb.csv || curl -s -o tankadb.csv https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tankadb.csv
          fetch -q -o tanka-votes.csv https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tanka-votes.csv || curl -s -o tanka-votes.csv https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tanka-votes.csv
          fetch -q -o tii-database.json https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tii-database.json || curl -s -o tii-database.json https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/tii-database.json
          
          # Configuration files
          echo "‚öôÔ∏è Downloading configuration files..."
          fetch -q -o wrangler.toml https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/wrangler.toml || curl -s -o wrangler.toml https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/wrangler.toml
          fetch -q -o _headers https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/_headers || curl -s -o _headers https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/_headers
          fetch -q -o _redirects https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/_redirects || curl -s -o _redirects https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/_redirects
          fetch -q -o CNAME https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/CNAME || curl -s -o CNAME https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/CNAME
          
          # Cloudflare Functions
          echo "‚òÅÔ∏è Downloading Cloudflare Functions..."
          cd functions/api
          fetch -q -o flickr-photos.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/flickr-photos.js || curl -s -o flickr-photos.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/flickr-photos.js
          fetch -q -o tii-entries.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/tii-entries.js || curl -s -o tii-entries.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/tii-entries.js
          fetch -q -o tanka-vote.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/tanka-vote.js || curl -s -o tanka-vote.js https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/functions/api/tanka-vote.js
          cd ../..
          
          # Assets (if any)
          echo "üñºÔ∏è Downloading assets..."
          cd assets/logo
          fetch -q -o logo.png https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/assets/logo/logo.png || curl -s -o logo.png https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/assets/logo/logo.png 2>/dev/null || echo "Logo not found (OK)"
          cd ../..
          
          # Documentation
          echo "üìö Downloading documentation..."
          fetch -q -o README.md https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/README.md || curl -s -o README.md https://raw.githubusercontent.com/sogoodsnet/sogoods.net-www/main/README.md
          
          # Set proper permissions
          echo "üîí Setting file permissions..."
          find . -type f -name "*.html" -exec chmod 644 {} \;
          find . -type f -name "*.css" -exec chmod 644 {} \;
          find . -type f -name "*.js" -exec chmod 644 {} \;
          find . -type f -name "*.csv" -exec chmod 644 {} \;
          find . -type f -name "*.json" -exec chmod 644 {} \;
          find . -type f -name "*.md" -exec chmod 644 {} \;
          find . -type f -name "*" -exec chmod 644 {} \; 2>/dev/null || true
          find . -type d -exec chmod 755 {} \;
          
          # Verify deployment
          echo "üìã Complete deployment verification:"
          echo "=== File structure ==="
          find . -type f | head -20
          echo ""
          echo "=== Directory structure ==="
          ls -la
          echo ""
          echo "=== Assets directory ==="
          ls -la assets/ 2>/dev/null || echo "No assets directory"
          echo ""
          echo "=== Functions directory ==="
          ls -la functions/api/ 2>/dev/null || echo "No functions directory"
          echo ""
          
          # File size check
          echo "üìä File sizes:"
          ls -lah *.html *.css *.js *.csv *.json 2>/dev/null || echo "Some files missing (may be normal)"
          
          # Content verification
          echo "üìÑ Content verification:"
          if [ -f "index.html" ]; then
            INDEX_SIZE=$(wc -l < index.html 2>/dev/null || echo "0")
            echo "index.html: $INDEX_SIZE lines"
            echo "First line: $(head -1 index.html 2>/dev/null || echo 'N/A')"
          fi
          
          if [ -f "tankadb.csv" ]; then
            TANKA_COUNT=$(wc -l < tankadb.csv 2>/dev/null || echo "0")
            echo "tankadb.csv: $TANKA_COUNT lines"
          fi
          
          echo "‚úÖ Complete website deployment finished!"
          echo "üìç Deployed to: `pwd`"
          echo "üåê Available at: https://sogoodsnet.sakura.ne.jp/"
          
    - name: Comprehensive Website Testing
      run: |
        echo "üåê Testing complete website functionality..."
        sleep 10
        
        # Basic HTTP access test
        echo "üì° Testing basic HTTP access..."
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://sogoodsnet.sakura.ne.jp/ || echo "000")
        echo "HTTP Status: $STATUS"
        
        # Content verification
        echo "üìÑ Testing content delivery..."
        if [ "$STATUS" = "200" ]; then
          # Test if integrated JavaScript is working
          CONTENT=$(curl -s https://sogoodsnet.sakura.ne.jp/ | grep -o "PhotoManager\|TankaSystem\|ImageDropHandler" | wc -l)
          echo "JavaScript integration check: $CONTENT components found"
          
          # Test specific functionality
          CSS_CHECK=$(curl -s https://sogoodsnet.sakura.ne.jp/style.css | head -c 100 | wc -c)
          echo "CSS file size check: $CSS_CHECK bytes"
          
          if [ "$CONTENT" -gt "0" ] && [ "$CSS_CHECK" -gt "50" ]; then
            echo "‚úÖ Complete website is functioning correctly!"
            echo "üîê Admin login should now work with password: sogoods2024"
            echo "üì± All integrated features available"
          else
            echo "‚ö†Ô∏è Some components may not be fully loaded"
          fi
        else
          echo "‚ùå Website is not accessible (Status: $STATUS)"
        fi
        
    - name: Deployment Summary
      if: always()
      run: |
        echo "## üöÄ Complete Website Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "- **Status**: ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Method**: Complete file sync from GitHub" >> $GITHUB_STEP_SUMMARY
          echo "- **Files Deployed**: " >> $GITHUB_STEP_SUMMARY
          echo "  - üìÑ Core: HTML, CSS, JavaScript" >> $GITHUB_STEP_SUMMARY
          echo "  - üóÉÔ∏è Databases: Tanka CSV, TII JSON" >> $GITHUB_STEP_SUMMARY
          echo "  - ‚òÅÔ∏è Functions: Cloudflare API endpoints" >> $GITHUB_STEP_SUMMARY
          echo "  - üñºÔ∏è Assets: Logos and images" >> $GITHUB_STEP_SUMMARY
          echo "  - ‚öôÔ∏è Config: Headers, redirects, CNAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Features**: ‚úÖ Admin login, Photo upload, Tanka system, TII database" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Check**: SSH connection, file downloads, or permissions" >> $GITHUB_STEP_SUMMARY
        fi
        echo "- **Server**: FreeBSD Sakura VPS" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: üåê [https://sogoodsnet.sakura.ne.jp/](https://sogoodsnet.sakura.ne.jp/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Admin Access Info:" >> $GITHUB_STEP_SUMMARY
        echo "- **Password**: \`sogoods2024\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Hidden Button**: Bottom-left corner of website" >> $GITHUB_STEP_SUMMARY
        echo "- **Emergency Access**: Type 'sogoods' on website" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Available Features:" >> $GITHUB_STEP_SUMMARY
        echo "1. üì∑ Admin photo upload (drag & drop)" >> $GITHUB_STEP_SUMMARY
        echo "2. üìù Tanka poem display with voting" >> $GITHUB_STEP_SUMMARY
        echo "3. üí¨ TII database entries" >> $GITHUB_STEP_SUMMARY
        echo "4. üñºÔ∏è Dynamic photo galleries" >> $GITHUB_STEP_SUMMARY
        echo "5. üìä Real-time statistics" >> $GITHUB_STEP_SUMMARY
